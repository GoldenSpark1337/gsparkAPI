// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gspark.Repository;

#nullable disable

namespace gspark.Repository.Migrations
{
    [DbContext(typeof(MarketPlaceContext))]
    [Migration("20220209101118_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("gspark.Domain.Models.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("BaseEntity");
                });

            modelBuilder.Entity("gspark.Domain.Models.Comment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<string>("CommentDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.TrackPlaylist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 2, 9, 16, 11, 18, 672, DateTimeKind.Local).AddTicks(3544));

                    b.HasKey("PlaylistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackPlaylist");
                });

            modelBuilder.Entity("gspark.Domain.Models.Genre", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Key", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TrackKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Key", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Kit", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<byte[]>("Artwork")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("Kit", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Playlist", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<byte[]>("Artwork")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Product", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.RecordLabel", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 2, 9, 16, 11, 18, 671, DateTimeKind.Local).AddTicks(5987));

                    b.Property<string>("Founder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.ToTable("RecordLabel", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Service", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<byte[]>("Artwork")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Subgenre", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GenreId");

                    b.ToTable("Subgenres", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Tag", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Track", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<byte[]>("Artwork")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Bpm")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Collaborator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("KeyId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("Plays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubGenre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("GenreId");

                    b.HasIndex("KeyId")
                        .IsUnique()
                        .HasFilter("[KeyId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Tracks", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.UploadedFile", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("FileSize")
                        .HasColumnType("float");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("UploadedBy");

                    b.ToTable("UploadedFiles", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.User", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RecordLabelId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("RecordLabelId");

                    b.HasIndex("Id", "Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Vst", b =>
                {
                    b.HasBaseType("gspark.Domain.Models.BaseEntity");

                    b.Property<byte[]>("Artwork")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("UserId");

                    b.ToTable("Vst", (string)null);
                });

            modelBuilder.Entity("gspark.Domain.Models.Comment", b =>
                {
                    b.HasOne("gspark.Domain.Models.Track", "Track")
                        .WithMany("Comments")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gspark.Domain.Models.TrackPlaylist", b =>
                {
                    b.HasOne("gspark.Domain.Models.Playlist", "Playlist")
                        .WithMany("TrackPlaylists")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.Track", "Track")
                        .WithMany("TrackPlaylists")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("gspark.Domain.Models.Genre", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Genre", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gspark.Domain.Models.Key", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Key", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gspark.Domain.Models.Kit", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Kit", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.User", "User")
                        .WithMany("Kits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gspark.Domain.Models.Playlist", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Playlist", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gspark.Domain.Models.Product", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Product", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gspark.Domain.Models.RecordLabel", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.RecordLabel", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gspark.Domain.Models.Service", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Service", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gspark.Domain.Models.Subgenre", b =>
                {
                    b.HasOne("gspark.Domain.Models.Genre", "Genre")
                        .WithMany("Subgenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Subgenre", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("gspark.Domain.Models.Tag", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Tag", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gspark.Domain.Models.Track", b =>
                {
                    b.HasOne("gspark.Domain.Models.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Track", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.Key", "Key")
                        .WithOne("Track")
                        .HasForeignKey("gspark.Domain.Models.Track", "KeyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.User", "User")
                        .WithMany("Tracks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Key");

                    b.Navigation("User");
                });

            modelBuilder.Entity("gspark.Domain.Models.UploadedFile", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.UploadedFile", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.User", "User")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gspark.Domain.Models.User", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.User", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.RecordLabel", "RecordLabel")
                        .WithMany("Users")
                        .HasForeignKey("RecordLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordLabel");
                });

            modelBuilder.Entity("gspark.Domain.Models.Vst", b =>
                {
                    b.HasOne("gspark.Domain.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("gspark.Domain.Models.Vst", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("gspark.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("gspark.Domain.Models.Genre", b =>
                {
                    b.Navigation("Subgenres");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("gspark.Domain.Models.Key", b =>
                {
                    b.Navigation("Track");
                });

            modelBuilder.Entity("gspark.Domain.Models.Playlist", b =>
                {
                    b.Navigation("TrackPlaylists");
                });

            modelBuilder.Entity("gspark.Domain.Models.RecordLabel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("gspark.Domain.Models.Track", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TrackPlaylists");
                });

            modelBuilder.Entity("gspark.Domain.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Kits");

                    b.Navigation("Playlists");

                    b.Navigation("Services");

                    b.Navigation("Tracks");

                    b.Navigation("UploadedFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
